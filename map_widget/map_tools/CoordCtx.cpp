#include "CoordCtx.h"        // Подключение заголовочного файла coord_ctx.h, содержащего объявление класса CoordCtx
#include <mapapi.h>           // Подключение библиотеки mapapi.h, предоставляющей функции для работы с координатами и картами

// Конструктор класса CoordCtx, принимающий дескриптор карты (hMap), тип координат (type) и точку (p) в формате QPointF
CoordCtx::CoordCtx(HMAP hMap, CoordType type, QPointF p) {
    double x = p.x();        // Получение координаты x из точки p
    double y = p.y();        // Получение координаты y из точки p

          // Проверка типа координат
    if (type == PIC) {        // Если тип координат - "пиксели изображения" (PIC)
        _pic = {int(x), int(y)};        // Сохранение координат в формате целых чисел (пиксели) в _pic
        mapPictureToPlane(hMap, &x, &y);        // Преобразование координат из пикселей изображения в метры на местности
        _plane = {x, y};        // Сохранение преобразованных координат (метры на местности) в _plane
        mapPlaneToGeo(hMap, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты (радианы)
        _geo = {x, y};        // Сохранение геодезических координат (радианы) в _geo
        mapGeoWGS84ToPlane42(hMap, &x, &y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42

    } else if (type == PLANE) {        // Если тип координат - "метры на местности" (PLANE)
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        double topicx = x, topicy = y;        // Создание временных переменных для преобразования координат
        mapPlaneToPicture(hMap, &topicx, &topicy);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)topicx, (int)topicy};        // Сохранение координат в формате пикселей изображения в _pic
        mapPlaneToGeo(hMap, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты (радианы)
        _geo = {x, y};        // Сохранение геодезических координат (радианы) в _geo
        mapGeoWGS84ToPlane42(hMap, &x, &y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42

    } else if (type == PLANE42) {        // Если тип координат - "метры на местности в системе 1942г" (PLANE42)
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42
        mapPlane42ToGeo42ByZone(y / 1000000, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты 1942г (радианы)
        mapGeo42ToGeoWGS84(hMap, &x, &y);        // Преобразование геодезических координат 1942г в WGS84 (радианы)
        _geo = {x, y};        // Сохранение геодезических координат WGS84 (радианы) в _geo
        mapGeoToPlane(hMap, &x, &y);        // Преобразование геодезических координат в метры на местности
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        mapPlaneToPicture(hMap, &x, &y);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)x, (int)y};        // Сохранение координат в формате пикселей изображения в _pic

    } else if (type == GEO) {        // Если тип координат - "геодезические координаты WGS84" (GEO)
        _geo = {x, y};        // Сохранение геодезических координат WGS84 (радианы) в _geo
        auto p42x = x;        // Создание временной переменной для преобразования координат
        auto p42y = y;        // Создание временной переменной для преобразования координат
        mapGeoWGS84ToPlane42(hMap, &p42x, &p42y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {p42x, p42y};        // Сохранение координат в системе 1942г (метры) в _plane42
        mapGeoToPlane(hMap, &x, &y);        // Преобразование геодезических координат в метры на местности
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        mapPlaneToPicture(hMap, &x, &y);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)x, (int)y};        // Сохранение координат в формате пикселей изображения в _pic
    }
}

// Конструктор класса CoordCtx, принимающий дескриптор карты (hMap), тип координат (type) и координаты x и y
CoordCtx::CoordCtx(HMAP hMap, CoordType type, double x, double y) {
          // Логика аналогична предыдущему конструктору, но координаты передаются напрямую, а не через QPointF
    if (type == PIC) {        // Если тип координат - "пиксели изображения" (PIC)
        _pic = {int(x), int(y)};        // Сохранение координат в формате целых чисел (пиксели) в _pic
        mapPictureToPlane(hMap, &x, &y);        // Преобразование координат из пикселей изображения в метры на местности
        _plane = {x, y};        // Сохранение преобразованных координат (метры на местности) в _plane
        mapPlaneToGeo(hMap, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты (радианы)
        _geo = {x, y};        // Сохранение геодезических координат (радианы) в _geo
        mapGeoWGS84ToPlane42(hMap, &x, &y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42
    } else if (type == PLANE) {        // Если тип координат - "метры на местности" (PLANE)
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        double topicx = x, topicy = y;        // Создание временных переменных для преобразования координат
        mapPlaneToPicture(hMap, &topicx, &topicy);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)topicx, (int)topicy};        // Сохранение координат в формате пикселей изображения в _pic
        mapPlaneToGeo(hMap, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты (радианы)
        _geo = {x, y};        // Сохранение геодезических координат (радианы) в _geo
        mapGeoWGS84ToPlane42(hMap, &x, &y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42

    } else if (type == PLANE42) {        // Если тип координат - "метры на местности в системе 1942г" (PLANE42)
        _plane42 = {x, y};        // Сохранение координат в системе 1942г (метры) в _plane42
        mapPlane42ToGeo42ByZone(y / 1000000, &x, &y);        // Преобразование координат из метров на местности в геодезические координаты 1942г (радианы)
        mapGeo42ToGeoWGS84(hMap, &x, &y);        // Преобразование геодезических координат 1942г в WGS84 (радианы)
        _geo = {x, y};        // Сохранение геодезических координат WGS84 (радианы) в _geo
        mapGeoToPlane(hMap, &x, &y);        // Преобразование геодезических координат в метры на местности
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        mapPlaneToPicture(hMap, &x, &y);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)x, (int)y};        // Сохранение координат в формате пикселей изображения в _pic

    } else if (type == GEO) {        // Если тип координат - "геодезические координаты WGS84" (GEO)
        _geo = {x, y};        // Сохранение геодезических координат WGS84 (радианы) в _geo
        auto p42x = x;        // Создание временной переменной для преобразования координат
        auto p42y = y;        // Создание временной переменной для преобразования координат
        mapGeoWGS84ToPlane42(hMap, &p42x, &p42y);        // Преобразование геодезических координат WGS84 в метры на местности в системе 1942г
        _plane42 = {p42x, p42y};        // Сохранение координат в системе 1942г (метры) в _plane42
        mapGeoToPlane(hMap, &x, &y);        // Преобразование геодезических координат в метры на местности
        _plane = {x, y};        // Сохранение координат (метры на местности) в _plane
        mapPlaneToPicture(hMap, &x, &y);        // Преобразование координат из метров на местности в пиксели изображения
        _pic = {(int)x, (int)y};        // Сохранение координат в формате пикселей изображения в _pic
    }
}

double CoordCtx::toDegrees(double v)  { return v*(180.0/M_PI);};
double CoordCtx::toRadians(double v)  { return v * (M_PI / 180.0);}

QPointF CoordCtx::geo() const { return _geo; }

QPointF CoordCtx::deg() const { return {toDegrees(_geo.x()), toDegrees(_geo.y()) }; }

QPointF CoordCtx::plane() const { return _plane; }

QPoint CoordCtx::pic() const { return _pic; }

QPointF CoordCtx::plane42() const { return _plane42; }
